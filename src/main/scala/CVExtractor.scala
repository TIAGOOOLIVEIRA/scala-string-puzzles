import java.io.{File, FileInputStream, InputStream}

import org.apache.tika.metadata.Metadata
import org.apache.tika.parser.{AutoDetectParser, ParseContext}
import org.apache.tika.sax.BodyContentHandler
import org.xml.sax._

import scala.annotation.tailrec

object pdfHandler extends ContentHandler {
  def characters(ch : Array[Char], start: Int, length: Int) {
    println(new String(ch))
  }

  def endDocument() {
  }

  def endElement(uri: String, localName: String, qName: String) {
  }

  def endPrefixMapping(prefix: String) {
  }

  def ignorableWhitespace(ch: Array[Char], start: Int, length: Int) {
  }

  def processingInstruction(target: String, data: String) {
  }

  def setDocumentLocator(locator: Locator) {
  }

  def skippedEntity(name: String) {
  }

  def startDocument() {
  }

  def startElement(uri: String, localName: String, qName: String, atts: Attributes) {
  }

  def startPrefixMapping(prefix: String, uri: String) {
  }
}


object CVExtractor extends App{
  //Document to consider on the histogram generator
  val file = new File(getClass.getClassLoader.getResource("Tiago_de_Souza_OliveiraEngCZResume.pdf").getPath)

  //val pdf : PDFParser = new PDFParser()

  //val handler : ContentHandler = pdfHandler
  //val txtstat : TextStatistics = new TextStatistics()
  //val txt : TXTParser = new  TXTParser()

  val stream : InputStream = new FileInputStream(file)

  val aparser = new AutoDetectParser()
  val handlerplaintxt = new BodyContentHandler
  val metadata : Metadata = new Metadata()
  val context : ParseContext = new ParseContext()

  aparser.parse(stream,
    handlerplaintxt,
    metadata,
    context)

  val outputtxt = handlerplaintxt.toString()

  //In case to check the number of chars using TIKA Statistics
  //val outputbyte = outputtxt.getBytes()
  //txtstat.addData(outputbyte, 0, outputbyte.size)
  //println(txtstat.count(64))
  //println("-----------------------------")
  //http://www.asciitable.com/
  //64 @

  val mappingCharsAndOccurrences = howManyOccurrencesChars(outputtxt)

  //In case to check all the chars in the CV document
  //res.foreach{ println }

  stream.close()

  val r = "[0-9a-z]+"

  mappingCharsAndOccurrences.filter(_._1.toString().matches(r)).map(x => s"${x._1} : ${repeatChar('-', x._2)}").sorted.foreach{ println }

  //Generating the "bar" of the histogram related to the number of occurrences
  def repeatChar(char: Char, times: Int): String = {
    @tailrec
    def utilAcc(c: Char, n: Int, acc: String): String = {
      if (n == 0) acc
      else utilAcc(c, n-1, acc + c)
    }
    utilAcc(char, times, "")
  }

  //Assuming all the chars in Lower Case.
  def howManyOccurrencesChars(w: String): List[(Char, Int)] = {
    val grouped = w.groupBy(x => x.toLower)
    grouped.map(x => (x._1, x._2.length)).toList
  }
}

/* The result running from my CV
0 : ---------------------------------
1 : --------------------------
2 : -------------------------------
3 : -------
4 : -----------
5 : -----
6 : --
7 : --------
8 : -------
9 : --
a
b : ----------------------------------------------------------------------------
c : --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
d : --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
e
f : --------------------------------------------------------------------------------------------------------------------------------
g : ---------------------------------------------------------------------------------------------------------------------------------------------
h : -------------------------------------------------------------------------------------------------------------------------------------------------
i
j : -----------------------
k : ----------------------------------------------------------
l : ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
m : -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
n : -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
o : ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
p : --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
q : ----------
r : -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
s : ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
t : --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
u : -------------------------------------------------------------------------------------------------------------------------------------------------------------------
v : -----------------------------------------------------------------
w : ----------------------------------------------------------------------
x : -----------------
y : ----------------------------------------------------------------
z : -----------------

Process finished with exit code 0
 */